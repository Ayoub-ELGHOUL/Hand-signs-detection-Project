import cv2
import mediapipe as mp
import pyautogui, time
import tkinter as tk
from tkinter.filedialog import*
from Crypto.Cipher import AES
from PIL import Image
import os




mp_hands = mp.solutions.hands
hands = mp_hands.Hands()
mp_draw = mp.solutions.drawing_utils
cap = cv2.VideoCapture(0)

finger_tips = [8, 12, 16, 20]
thumb_tip = 4


while True:
    
    ret, img = cap.read()
    img = cv2.flip(img, 1)
    h, w, c = img.shape
    results = hands.process(img)

    if results.multi_hand_landmarks:
        for hand_landmark in results.multi_hand_landmarks:
            lm_list = []
            for id, lm in enumerate(hand_landmark.landmark):
                lm_list.append(lm)
            finger_fold_status = []
            for tip in finger_tips:
                x, y = int(lm_list[tip].x * w), int(lm_list[tip].y * h)

                if lm_list[tip].x < lm_list[tip - 2].x:
                    
                    finger_fold_status.append(True)
                else:
                    finger_fold_status.append(False)

            print(finger_fold_status)

            x, y = int(lm_list[8].x * w), int(lm_list[8].y * h)
            print(x, y)

            
            if lm_list[4].y < lm_list[2].y and lm_list[8].y < lm_list[6].y and lm_list[12].y < lm_list[10].y and \
                    lm_list[16].y < lm_list[14].y and lm_list[20].y < lm_list[18].y and lm_list[17].x < lm_list[0].x < \
                    lm_list[5].x:
                cv2.putText(img, "Arret", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                print("Arret")
                

            
            if lm_list[3].x > lm_list[4].x and lm_list[8].y < lm_list[6].y and lm_list[12].y > lm_list[10].y and \
                    lm_list[16].y > lm_list[14].y and lm_list[20].y > lm_list[18].y:
                cv2.putText(img, "En avant", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                print("En avant")

            
            if lm_list[3].x > lm_list[4].x and lm_list[3].y < lm_list[4].y and lm_list[8].y > lm_list[6].y and lm_list[12].y < lm_list[10].y and \
                    lm_list[16].y < lm_list[14].y and lm_list[20].y < lm_list[18].y:
                cv2.putText(img, "En arriere", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                print("En arriere")

            
            if lm_list[4].y < lm_list[2].y and lm_list[8].x < lm_list[6].x and lm_list[12].x > lm_list[10].x and \
                    lm_list[16].x > lm_list[14].x and lm_list[20].x > lm_list[18].x and lm_list[5].x < lm_list[0].x:
                cv2.putText(img, "A gauche", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                print("A gauche")

            
            if lm_list[4].y < lm_list[2].y and lm_list[8].x > lm_list[6].x and lm_list[12].x < lm_list[10].x and \
                    lm_list[16].x < lm_list[14].x and lm_list[20].x < lm_list[18].x:
                cv2.putText(img, "A droite", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                print("A droite")


            if all(finger_fold_status):
                
                if lm_list[thumb_tip].y < lm_list[thumb_tip - 1].y < lm_list[thumb_tip - 2].y and lm_list[0].x < lm_list[3].y:
                    print("C'est bon")
                    cv2.putText(img, "C'est bon", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 3)
                    
                    
                if lm_list[thumb_tip].y > lm_list[thumb_tip - 1].y > lm_list[thumb_tip - 2].y and lm_list[0].x < lm_list[3].y:
                    cv2.putText(img, "pas bon", (20, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 3)
                    print("pas bon")


            mp_draw.draw_landmarks(img, hand_landmark,
                                   mp_hands.HAND_CONNECTIONS,
                                   mp_draw.DrawingSpec((0, 0, 255), 6, 3),
                                   mp_draw.DrawingSpec((0, 255, 0), 4, 2)
                                   )

    cv2.imshow("Hand Sign Detection", img)
   
    cv2.waitKey(1)
     
    key = cv2.waitKey(1)
    
    while key == ord('s'):
        myScreenshot = pyautogui.screenshot()
        save_path = asksaveasfilename()
        myScreenshot.save(save_path+"_CaptureCryptee.png")
        
        filename=save_path+"_CaptureCryptee.png"
        
        image = Image.open(filename)
        # Convert the image to a byte array
       
        image_bytes = image.tobytes()
        
        # Ask the user to enter a secret key
        secret_key = input("Entrez la clee pour chiffrement:\n ")
        # Pad the secret key to the correct length for AES
        secret_key = secret_key.encode()
        secret_key = secret_key + b' ' * (16 - len(secret_key))
       
        # Create a new AES cipher and encrypt the image
        cipher = AES.new(secret_key, AES.MODE_EAX)
        ciphertext, tag = cipher.encrypt_and_digest(image_bytes)
        # Save the encrypted image to a file
        
        with open(filename, 'wb') as f:
            f.write(cipher.nonce)
            f.write(tag)
            f.write(ciphertext)
            
        print('La capture d\'ecran a ete cryptee et sauvegardee')
        choix = input('Vous voulez la decryptee? (O/N)\n')
        if choix == 'O' or choix == 'o':
            # To decrypt the image, you would need the secret key and the non
            # that was used during the encryption process
            with open(filename, 'rb') as f:
                nonce = f.read(16)
                tag = f.read(16)
                ciphertext = f.read()
            # Recreate the cipher object with the secret key and nonce
            cipher = AES.new(secret_key, AES.MODE_EAX, nonce)
            # Decrypt the image
            image_bytes = cipher.decrypt_and_verify(ciphertext, tag)
            # Save the decrypted image to a fil
            image = Image.frombytes(image.mode, image.size, image_bytes)
            image.save(save_path+"_CaptureDecryptee.png")
            print('L\'image a ete sauvegardee decryptee!')
            
        elif choix == 'N' or 'n':
            print('L\'image a ete sauvegardee cryptee!')
        else :
            print('vous avez pas choisi un bon choix alors l\'image a ete sauvegardee cryptee!')
        
        break
    
